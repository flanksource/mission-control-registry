{{- if .Values.topology.enabled }}
{{- if and .Values.prometheus.createConnection .Values.prometheus.url }}
apiVersion: mission-control.flanksource.com/v1
kind: Connection
metadata:
  name: {{ .Values.prometheus.connection }}
spec:
  prometheus:
    url:
    {{- .Values.prometheus.url | toYaml | nindent 6 }}
    {{- if .Values.prometheus.auth }}
    {{ omit .Values.prometheus.auth "url" | toYaml | nindent 4}}
    {{- end }}
{{- end }}
---
apiVersion: canaries.flanksource.com/v1
kind: Topology
metadata:
  name: {{ tpl .Values.topology.name . }}
  labels:
    cluster: {{.Values.clusterName}}
    {{- include "kubernetes.labels" . | nindent 4 }}
spec:
  groupBy:
    {{- toYaml .Values.topology.groupBy | nindent 4 }}
  type: Kubernetes::Cluster
  icon: "{{ .Values.topology.icon }}"
  schedule: "{{ .Values.topology.schedule }}"
  properties:
    {{- include "kubernetes.topology.metricProperties.cluster" . | nindent 4 }}
  components:
    - name: nodes
      icon: server
      id:
        javascript: properties.zone + "/" + self.name
      type: Kubernetes::Node
      components:
      - name: NodesGroup
        type: virtual
        icon: server
        lookup:
          catalog:
            - selector:
              - types: ['Kubernetes::Node']
                tagSelector: 'cluster={{.Values.clusterName}}'
              display:
                expr: |
                  dyn(results).map(r, {
                    'name': r.name,
                    'type': 'Kubernetes::Node',
                    'labels': r.labels,
                    'external_id': r.name,
                    'logs': [{'name': 'Kubernetes', 'type': 'KubernetesNode'}],
                    'configs': [{'id': r.id}],
                    'selectors': [{'fieldSelector': 'node='+r.name}],
                    'status': r.status,
                    'status_reason': r.status + ' ' + k8s.getHealth(r.config).message,
                    'health': r.health,
                    'config_id': r.id,
                    'properties': [
                      {"name": "cpu", "max": k8s.cpuAsMillicores(r.config.status.allocatable["cpu"]), "unit": "millicores", "headline": true},
                      {"name": "memory", "max": k8s.memoryAsBytes(r.config.status.allocatable["memory"]), "unit": "bytes", "headline": true},
                      {"name": "ephemeral-storage", "max": has(r.config.status.allocatable) && ("ephemeral-storage" in r.config.status.allocatable) ? k8s.memoryAsBytes(r.config.status.allocatable["ephemeral-storage"]) : 0, "unit": "bytes", "headline": true},
                      {"name": "zone", "text": "topology.kubernetes.io/zone" in r.labels ? r.labels["topology.kubernetes.io/zone"]: ""},
                    ]
                  }).toJSON()

        properties:
          {{- include "kubernetes.topology.metricProperties.node" . | nindent 8 }}
    
    - name: DeploymentGroups
      icon: deployment
      lookup:
        catalog:
          - selector:
              - types: ['Kubernetes::Deployment']
                tagSelector: 'cluster={{.Values.clusterName}}'
            display:
              expr: |
                dyn(results).map(r, {
                  'name': r.name,
                  'namespace': r.tags['namespace'],
                  'type': 'Kubernetes::Deployment',
                  'external_id': r.tags['namespace'] + '/' + r.name,
                  'parentLookup': {'name': r.tags['namespace'], 'type': 'Kubernetes::Namespace'},
                  'labels': r.labels,
                  'configs': [{'id': r.id}],
                  'status': r.status,
                  'status_reason': r.status + ' ' + k8s.getHealth(r.config).message,
                  'health': r.health,
                  'config_id': r.id,
                  'properties': [
                    {"name": "created_at", "text": time.Parse('2006-01-02T15:04:05Z07:00', r.config.metadata.creationTimestamp)},
                    {"name": "namespace", "text": r.tags['namespace']},
                  ]
                }).toJSON()

    - name: PodGroup
      icon: pods
      type: virtual
      lookup:
        catalog:
          - selector:
            - types: ['Kubernetes::Pod']
              tagSelector: 'cluster={{.Values.clusterName}}'
            display:
              expr: |
                dyn(results).filter(r, has(r.config.metadata.ownerReferences) && r.config.metadata.ownerReferences[0].kind == 'ReplicaSet').map(r, {
                  'name': r.name,
                  'namespace': r.tags['namespace'],
                  'type': 'Kubernetes::Pod',
                  'external_id': r.tags['namespace'] + '/' + r.name,
                  'parentLookup': {
                    'name': r.config.metadata.ownerReferences[0].name.split("-").slice(0, r.config.metadata.ownerReferences[0].name.split("-").size() - 1).join("-"),
                    'namespace': r.tags['namespace'], 
                    'type': 'Kubernetes::Deployment'
                  },
                  'labels': r.labels,
                  'configs': [{'id': r.id}],
                  'logs': [{'name': 'Kubernetes', 'type': 'KubernetesPod'}],
                  'status': r.status,
                  'status_reason': r.status + ' ' + k8s.getHealth(r.config).message,
                  'health': r.health,
                  'config_id': r.id,
                  'properties': [
                    {"name": "image", "text": r.config.spec.containers[0].image},
                    {"name": "cpu", "max": [k8s.getResourcesLimit(r.config, "cpu"), k8s.getResourcesRequests(r.config, "cpu") * 2, 1000].filter(i, i != 0)[0], "unit": "millicores", "headline": true},
                    {"name": "memory", "max": [k8s.getResourcesLimit(r.config, "memory"), k8s.getResourcesRequests(r.config, "memory") * 3/2, 1073741824].filter(i, i != 0)[0], "unit": "bytes", "headline": true},
                    {"name": "node", "text": r.config.spec.?nodeName.orValue('')},
                    {"name": "created_at", "text": time.Parse('2006-01-02T15:04:05Z07:00', r.config.metadata.creationTimestamp)},
                    {"name": "namespace", "text": r.tags['namespace']},
                  ]
                }).toJSON()

      properties:
        {{- include "kubernetes.topology.metricProperties.pod" . | nindent 6 }}

    - name: Namespaces
      icon: namespace
      type: Kubernetes::Namespaces
      components:
      - name: NamespaceGroup
        type: virtual
        lookup:
          catalog:
            - selector:
              - types: ['Kubernetes::Namespace']
                tagSelector: 'cluster={{.Values.clusterName}}'
              display:
                expr: |
                  dyn(results).map(r, {
                    'name': r.name,
                    'type': 'Kubernetes::Namespace',
                    'external_id': r.name,
                    'labels': r.labels,
                    'configs': [{'id': r.id}],
                    'health': r.health,
                    'status': r.status,
                    'status_reason': r.status != 'Healthy' ? r.status + ' ' + k8s.getHealth(r.config).message : '',
                    'config_id': r.id,
                    'properties': [
                      {'name': 'cpu', 'unit': 'millicores', 'headline': true},
                      {'name': 'memory', 'unit': 'bytes', 'headline': true},
                    ],
                  }).toJSON()
        properties:
          {{- include "kubernetes.topology.metricProperties.namespace" . | nindent 8 }}

    
    - name: PodNamespaceGroup
      icon: pods
      lookup:
        catalog:
          - selector:
              - types: ['Kubernetes::Pod']
            display:
              expr: |
                dyn(results).map(r, {
                  'name': r.name,
                  'namespace': r.tags['namespace'],
                  'type': 'Kubernetes::Pod',
                  'external_id': r.tags['namespace'] + '/' + r.name,
                  'parentLookup': {
                    'name': r.tags['namespace'], 
                    'type': 'Kubernetes::Namespace'
                  },
                  'labels': r.labels,
                  'configs': [{'id': r.id}],
                  'logs': [{'name': 'Kubernetes', 'type': 'KubernetesPod'}],
                  'status': r.status,
                  'status_reason': r.status + ' ' + k8s.getHealth(r.config).message,
                  'health': r.health,
                  'config_id': r.id,
                  'properties': [
                    {"name": "image", "text": r.config.spec.containers[0].image},
                    {"name": "cpu", "max": [k8s.getResourcesLimit(r.config, "cpu"), k8s.getResourcesRequests(r.config, "cpu") * 2, 1000].filter(i, i != 0)[0], "unit": "millicores", "headline": true},
                    {"name": "memory", "max": [k8s.getResourcesLimit(r.config, "memory"), k8s.getResourcesRequests(r.config, "memory") * 3/2, 1073741824].filter(i, i != 0)[0], "unit": "bytes", "headline": true},
                    {"name": "node", "text": r.config.spec.?nodeName.orValue('')},
                    {"name": "created_at", "text": time.Parse('2006-01-02T15:04:05Z07:00', r.config.metadata.creationTimestamp)},
                    {"name": "namespace", "text": r.tags['namespace']},
                  ]
                }).toJSON()

    {{- if .Values.topology.ingress }}
    - name: Ingresses
      icon: k8s-ingress
      type: Kubernetes::Ingresses
      components:
      - name: IngressGroup
        type: virtual
        lookup:
          catalog:
            - selector:
              - types: ['Kubernetes::Ingress']
                tagSelector: 'cluster={{.Values.clusterName}}'
              display:
                expr: |
                  dyn(results).map(r, {
                    'name': {{.Values.topology.ingress.nameExpr}},
                    'namespace': r.tags['namespace'],
                    'type': 'Kubernetes::Ingress',
                    'icon': 'k8s-ingress',
                    'external_id': r.name,
                    'labels': r.labels,
                    'configs': [{'id': r.id}],
                    'health': r.health,
                    'status': r.status,
                    'status_reason': k8s.getHealth(r.config).status != 'Healthy' ? k8s.getHealth(r.config).status + ' ' + k8s.getHealth(r.config).message : '',
                    'config_id': r.id,

                    {{- if .Values.topology.ingress.enableChecks }}
                    'component_checks': [{
                      'inline': {
                        'http': dyn(r.config.spec.rules).map(rule, {
                          'name': 'ingress/' + rule.host,
                          'url': 'https://' + rule.host,
                        })
                      }
                    }],
                    {{- end}}

                  }).toJSON()
    {{- end}}

{{- end}}
