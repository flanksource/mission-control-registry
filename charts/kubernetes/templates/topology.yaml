apiVersion: canaries.flanksource.com/v1
kind: Topology
metadata:
  name: {{ .Values.topology.name }}
  labels:
    {{- include "kubernetes.labels" . | nindent 4 }}
spec:
  type: Kubernetes::Cluster
  icon: kubernetes
  schedule: "{{ .Values.topology.schedule }}"
  properties:
  - name: cpu
    lookup:
      prometheus:
      - query: '1000 * sum(rate(container_cpu_usage_seconds_total{container!=""}[5m]))'
        display:
          expr: |
            [{'name': 'cpu', 'value': int(results[0].value), 'headline': true, 'unit': 'millicores'}].toJSON()
  - name: memory
    lookup:
      prometheus:
      - query: 'sum(container_memory_working_set_bytes{container!=""})'
        display:
          expr: |
            [{'name': 'memory', 'value': int(results[0].value), 'headline': true, 'unit': 'bytes'}].toJSON()

  components:
    - name: nodes
      icon: server
      id:
        javascript: properties.zone + "/" + self.name
      type: Kubernetes::Node
      components:
        - name: NodesGroup
          type: virtual
          icon: server
          lookup:
            kubernetes:
              - kind: Node
                name: k8s
                display:
                  expr: |
                    dyn(results).map(r, r.Object).map(r, {
                      'name': r.metadata.name,
                      'type': 'Kubernetes::Node',
                      'labels': k8s.labels(r),
                      'external_id': r.metadata.name,
                      'logs': [{'name': 'Kubernetes', 'type': 'KubernetesNode'}],
                      'configs': [{'name': r.metadata.name, 'type': 'Kubernetes::Node'}],
                      'selectors':[{'fieldSelector': 'node='+r.metadata.name}],
                      'status': k8s.getHealth(r).status == "Healthy" ? "healthy" : "unhealthy",
                      'status_reason': k8s.getHealth(r).message,
                      'properties': k8s.nodeProperties(r),
                    }).toJSON()

          properties:
            - name: cpu
              lookup:
                prometheus:
                - query: '1000 * sum(rate(container_cpu_usage_seconds_total{container!=""}[5m])) by (node)'
                  display:
                    expr: |
                      dyn(results).map(r, {
                        'name': r.node,
                        'properties': [{'name': 'cpu', 'value': math.Ceil(int(r.value))}]
                      }).toJSON()
            - name: memory
              lookup:
                prometheus:
                - query: 'sum(container_memory_working_set_bytes{container!=""}) by (node)'
                  display:
                    expr: |
                      dyn(results).map(r, {
                        'name': r.node,
                        'properties': [{'name': 'memory', 'value': int(r.value)}]
                      }).toJSON()

            - name: ephemeral-storage
              lookup:
                prometheus:
                - query: 'max by (instance) (avg_over_time(node_filesystem_avail_bytes{mountpoint="/",fstype!="rootfs"}[5m]))'
                  display:
                    expr: |
                      dyn(results).map(r, {
                        'name': r.node,
                        'properties': [{'name': 'memory', 'value': int(r.value)}]
                      }).toJSON()

    - name: Pods
      icon: pods
      type: KubernetesPods
      hidden: true
      type: virtual
      components:
        - name: PodGroup
          icon: pods
          type: virtual
          lookup:
            kubernetes:
              - kind: Pod
                ready: false
                ignore:
                  - junit-fail**
                  - junit-pass**
                display:
                  expr: |
                    dyn(results).map(r, r.Object).map(r, {
                      'name': r.metadata.name,
                      'namespace': r.metadata.namespace,
                      'type': 'Kubernetes::Pod',
                      'external_id': r.metadata.namespace + '/' + r.metadata.name,
                      'parentLookup': {'name': r.metadata.namespace, 'type': 'Kubernetes::Namespace'},
                      'labels': k8s.labels(r),
                      'configs': [{'name': r.metadata.name, 'type': 'Kubernetes::Pod'}],
                      'logs': [{'name': 'Kubernetes', 'type': 'KubernetesPod'}],
                      'status': k8s.getHealth(r).status == "Healthy" ? "healthy" : "unhealthy",
                      'status_reason': k8s.getHealth(r).message,
                      'properties': k8s.podProperties(r),
                    }).toJSON()

          properties:
            - name: cpu
              lookup:
                prometheus:
                - query: '1000 * sum(rate(container_cpu_usage_seconds_total{container!=""}[5m])) by (pod)'
                  display:
                    expr: |
                      dyn(results).map(r, {
                        'name': r.pod,
                        'properties': [{'name': 'cpu', 'value': math.Ceil(int(r.value))}]
                      }).toJSON()
            - name: memory
              lookup:
                prometheus:
                - query: 'sum(container_memory_working_set_bytes{container!=""}) by (pod)'
                  display:
                    expr: |
                      dyn(results).map(r, {
                        'name': r.pod,
                        'properties': [{'name': 'memory', 'value': int(r.value)}]
                      }).toJSON()

    - name: Namespaces
      icon: namespace
      type: Kubernetes::Namespaces
      components:
        - name: NamespaceGroup
          type: virtual
          lookup:
            kubernetes:
              - kind: Namespace
                display:
                  expr: |
                    dyn(results).map(r, r.Object).map(r, {
                      'name': r.metadata.name,
                      'type': 'Kubernetes::Namespace',
                      'external_id': r.metadata.name,
                      'labels': k8s.labels(r),
                      'configs': [{'name': r.metadata.name, 'type': 'Kubernetes::Namespace'}],
                      'properties': [
                        {'name': 'memory', 'unit': 'bytes', 'headline': true},
                        {'name': 'cpu', 'unit': 'millicores', 'headline': true},
                      ],
                    }).toJSON()
          properties:
            - name: cpu
              lookup:
                prometheus:
                - query: '1000 * sum(rate(container_cpu_usage_seconds_total{container!=""}[5m])) by (namespace)'
                  display:
                    expr: |
                      dyn(results).map(r, {
                        'name': r.namespace,
                        'properties': [{'name': 'cpu', 'value': math.Ceil(int(r.value))}]
                      }).toJSON()
            - name: memory
              lookup:
                prometheus:
                - query: 'sum(container_memory_working_set_bytes{container!=""}) by (namespace)'
                  display:
                    expr: |
                      dyn(results).map(r, {
                        'name': r.namespace,
                        'properties': [{'name': 'memory', 'value': int(r.value)}]
                      }).toJSON()
