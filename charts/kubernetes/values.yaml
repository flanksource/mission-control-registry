# yaml-language-server: $schema=./values.schema.json
nameOverride: ""
fullnameOverride: ""
labels: {}

clusterName: kubernetes
prometheusURL: ""
topology:
  name: cluster
  schedule: "@every 5m"
  icon: kubernetes

scraper:
  name: kubernetes
  kubeconfig: {}
  exclusions:
    name: []
    namespace: []
    kind: []
    labels: {}
  defaultExclusions:
    name: []
    namespace: []
    labels:
      canary-checker.flanksource.com/generated: "true"
    kind:
      - Secret
      - APIService
      - PodMetrics
      - NodeMetrics
      - endpoints.discovery.k8s.io
      - endpointslices.discovery.k8s.io
      - leases.coordination.k8s.io
      - podmetrics.metrics.k8s.io
      - nodemetrics.metrics.k8s.io
      - customresourcedefinition
      - controllerrevisions
      - certificaterequests
      - orders.acme.cert-manager.io

  relationships: []
  defaultRelationships:
    - kind:
        expr: "has(spec.claimRef) ? spec.claimRef.kind : ''"
      name:
        expr: "has(spec.claimRef) ? spec.claimRef.name : ''"
      namespace:
        expr: "has(spec.claimRef) ? spec.claimRef.namespace : ''"
    # FluxCD Helm relationships
    - name:
        label: "helm.toolkit.fluxcd.io/name"
      namespace:
        label: "helm.toolkit.fluxcd.io/namespace"
      kind:
        value: "HelmRelease"
    # FluxCD Kustomize relationships
    - name:
        label: "kustomize.toolkit.fluxcd.io/name"
      namespace:
        label: "kustomize.toolkit.fluxcd.io/namespace"
      kind:
        value: "Kustomization"
    # FluxCD Git relationships
    - name:
        expr: "has(spec.sourceRef) ? spec.sourceRef.name : '' "
      namespace:
        expr: "has(spec.sourceRef) && has(spec.sourceRef.namespace)  ? spec.sourceRef.namespace : metadata.namespace "
      kind:
        value: "GitRepository"

  event:
    exclusions:
      reason:
        - SuccessfulCreate
        - Created
        - DNSConfigForming

    severityKeywords:
      error:
        - failed
        - error
      warn:
        - backoff
        - nodeoutofmemory

  transform:
    changes:
      exclude:
        - 'details.source.component == "canary-checker" && (change_type == "Failed" || change_type == "Pass")'
        - 'config_type == "Kubernetes::Node" && has(details.message) && details.message == "status.images"'
        - 'config_type == "Kubernetes::Node" && details.message == "status.images"'
        - 'has(details.source) && details.source.component == "kustomize-controller" && details.reason == "ReconciliationSucceeded"'
        - 'config_type.startsWith("Kubernetes::") && has(details.message) && details.message == "metadata.annotations.endpoints.kubernetes.io/last-change-trigger-time"'
        - >
          change_type == "diff" && summary == "status.reconciledAt" &&
          config != null &&
          has(config.apiVersion) && config.apiVersion == "argoproj.io/v1alpha1" &&
          has(config.kind) && config.kind == "Application"
      mapping:
        - filter: >
            change.change_type == 'diff' && change.summary == "status.containerStatuses" &&
            patch != null && has(patch.status) && has(patch.status.containerStatuses) &&
            patch.status.containerStatuses.size() > 0 &&
            has(patch.status.containerStatuses[0].restartCount)
          type: PodCrashLooping

    relationship:
      # Link a service to a deployment (adjust the label selector accordingly)
      - filter: config_type == "Kubernetes::Service"
        type:
          value: 'Kubernetes::Deployment'
        name:
          expr: |
            has(config.spec.selector) && has(config.spec.selector.name) ? config.spec.selector.name : ''
      # Link Pods to PVCs
      - filter: config_type == 'Kubernetes::Pod'
        expr: |
          config.spec.volumes.
            filter(item, has(item.persistentVolumeClaim)).
            map(item, {"type": "Kubernetes::PersistentVolumeClaim", "name": item.persistentVolumeClaim.claimName}).
            toJSON()
      # Link Argo Application to the resources
      - filter: config_type == "Kubernetes::Application" && config.apiVersion == "argoproj.io/v1alpha1"
        expr: |
          config.status.resources.map(item, {
            "type": "Kubernetes::" + item.kind,
            "name": item.name,
            "labels": {
              "namespace": item.namespace,
            },
          }).toJSON()
  retention:
    changes:
      - name: ReconciliationSucceeded
        count: 10

playbooks:
  edit_kubernetes_manifests:
    enabled: false
    git_connection: "connection://"
