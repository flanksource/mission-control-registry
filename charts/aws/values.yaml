nameOverride: ''
fullnameOverride: ''
labels: {}
scraper:
  name: aws

connectionDetails:
  connection: ''
  accessKey:
    name: ''
    value: ''
    valueFrom:
      serviceAccount: ''
      helmRef:
        key: ''
        name: ''
      configMapKeyRef:
        key: ''
        name: ''
      secretKeyRef:
        key: ''
        name: ''

  secretKey:
    name: ''
    value: ''
    valueFrom:
      serviceAccount: ''
      helmRef:
        key: ''
        name: ''
      configMapKeyRef:
        key: ''
        name: ''
      secretKeyRef:
        key: ''
        name: ''
  region: [] # AWS regions to pull from
  endpoint: ''
  skipTLSVerify: false
  assumeRole: ''

cloudtrail:
  maxAge: ''
  exclude: []

compliance: true

# Scrape cost reports and match them with catalog items
costReporting:
  enabled: false
  database: ''
  region: ''
  s3BucketPath: ''
  table: ''

inventory: true

patchDetails: true

patchStates: true

trustedAdvisorCheck: false

includeResources: []

excludeResources: []

transform:
  relationship:
    # EKS Cluster to Kubernetes Cluster & Kubernetes Node
    - filter: config_type == 'AWS::EKS::Cluster'
      expr: |
        [
          {"type": "Kubernetes::Cluster","labels": {"aws/account-id": tags['account'],"eks-cluster-name": tags["alpha.eksctl.io/cluster-name"]}},
          {"type": "Kubernetes::Node","labels": {"aws/account-id": tags['account'],"alpha.eksctl.io/cluster-name": tags["alpha.eksctl.io/cluster-name"]}}
        ].toJSON()

    # EC2 Instance to kubernetes node
    - filter: config_type == 'AWS::EC2:Instance'
      expr: |
        [{"type": "Kubernetes::Node", "labels": {"alpha.eksctl.io/instance-id": config["instance_id"]}}].toJSON()

    # IAM Role to Kubernetes Node
    - filter: config_type == 'AWS::IAM::Role'
      expr: |
        [{"type": "Kubernetes::Node", "labels": {"aws/iam-role": config["Arn"]}}].toJSON()

    # AvailabilityZone to Zone ID & Kubernetes Node
    - filter: config_type == 'AWS::AvailabilityZone'
      expr: |
        [
          {"type": "Kubernetes::Node", "labels": {"aws/account-id": tags['account'], "topology.kubernetes.io/zone": name}},
          {"type": "AWS::AvailabilityZoneID", "name": config["ZoneId"]}
        ].toJSON()

    # Region to ZoneID
    - filter: config_type == 'AWS::Region'
      expr: |
        [{"type": "AWS::AvailabilityZoneID", "labels": {"region": name}}].toJSON()
