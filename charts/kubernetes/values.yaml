# yaml-language-server: $schema=values.schema.json

# @schema
# required: false
# @schema
# @ignored
nameOverride: ""
# @schema
# required: false
# @schema
# @ignored
fullnameOverride: ""
# @schema
# required: false
# additionalProperties: true
# @schema
labels: {}

# @schema
# required: false
# $ref: https://raw.githubusercontent.com/flanksource/duty/main/schema/openapi/scrape_config.schema.json#/$defs/EnvVar
# @schema
kubeconfig: {}

clusterName: kubernetes

# @schema
# required: false
# @schema
prometheus:
  # @schema
  # required: false
  # @schema
  createConnection: true
  # @schema
  # required: false
  # @schema
  connection: prometheus
  # @schema
  # required: false
  # $ref: https://raw.githubusercontent.com/flanksource/duty/main/schema/openapi/scrape_config.schema.json#/$defs/EnvVar
  # @schema
  url: {}
  # @schema
  # required: false
  # @schema
  # prometheus labels to inject: "\,label1=key1\,label2=key2\,label3=~key3"
  # Note: comma(,) needs to be escaped as /, and prometheus.labels should always start with '/,' to work with existing labels
  labels: ""
  # @schema
  # required: false
  # $ref: https://raw.githubusercontent.com/flanksource/duty/main/schema/openapi/connection.schema.json#/$defs/ConnectionPrometheus
  # @schema
  auth: {}

# @schema
# required: false
# @schema
metrics:
  enabled: true
  # @schema
  # default: prometheus
  # enum:
  # - prometheus
  # - gke
  # @schema
  type: prometheus
  # -- queries to retrieve cpu/memory metrics for cluster/node/pod
  queries:
    prometheus:
      cluster_cpu: '1000 * sum(rate(container_cpu_usage_seconds_total{container!=""{{.Values.prometheus.labels}}}[5m]))'
      cluster_memory: 'sum(container_memory_working_set_bytes{container!=""{{.Values.prometheus.labels | default .Values.prometheusLabels}}})'
      node_cpu: '1000 * sum(rate(container_cpu_usage_seconds_total{container!=""{{.Values.prometheus.labels | default .Values.prometheusLabels}}}[5m])) by (node)'
      node_memory: 'sum(container_memory_working_set_bytes{container!="",pod!=""{{.Values.prometheus.labels | default .Values.prometheusLabels}}} * on(pod, namespace) group_left kube_pod_status_phase{phase="Running"{{.Values.prometheus.labels | default .Values.prometheusLabels}}} > 0) by (node)'
      node_storage: 'max by (instance) (avg_over_time(node_filesystem_avail_bytes{mountpoint="/",fstype!="rootfs"{{.Values.prometheus.labels | default .Values.prometheusLabels}}}[5m]))'
      pod_cpu: '1000 * sum(rate(container_cpu_usage_seconds_total{container!=""{{.Values.prometheus.labels | default .Values.prometheusLabels}}}[5m])) by (pod)'
      pod_memory: 'sum(container_memory_working_set_bytes{container!=""{{.Values.prometheus.labels | default .Values.prometheusLabels}}}) by (pod)'
      namespace_cpu: '1000 * sum(rate(container_cpu_usage_seconds_total{container!=""{{.Values.prometheus.labels | default .Values.prometheusLabels}}}[5m])) by (namespace)'
      namespace_memory: 'sum(container_memory_working_set_bytes{container!="",pod!=""{{.Values.prometheus.labels | default .Values.prometheusLabels}}} * on(pod, namespace) group_left kube_pod_status_phase{phase="Running"{{.Values.prometheus.labels | default .Values.prometheusLabels}}} > 0) by (namespace)'
    gke:
      cluster_name: ""
      cluster_cpu: 'sum(rate(kubernetes_io:container_cpu_core_usage_time{container_name!="",cluster_name="{{.Values.metrics.queries.gke.cluster_name}}"{{.Values.prometheus.labels}}}[5m]))'
      cluster_memory: 'sum(kubernetes_io:container_memory_used_bytes{cluster_name="{{.Values.metrics.queries.gke.cluster_name}}"{{.Values.prometheus.labels}}})'
      node_cpu: 'sum(rate(label_replace(kubernetes_io:node_cpu_core_usage_time{cluster_name="{{.Values.metrics.queries.gke.cluster_name}}"{{.Values.prometheus.labels}}}, "node","$1","node_name", "(.+)")[5m:])) by (node)'
      node_memory: 'sum(label_replace(kubernetes_io:container_memory_used_bytes{cluster_name="{{.Values.metrics.queries.gke.cluster_name}}"{{.Values.prometheus.labels}}}, "node","$1","node_name", "(.+)")) by (node)'
      node_storage: 'sum(label_replace(kubernetes_io:node_ephemeral_storage_used_bytes{cluster_name="{{.Values.metrics.queries.gke.cluster_name}}"{{.Values.prometheus.labels}}},  "node","$1","node_name", "(.+)")) by (node)'
      pod_cpu: 'sum(rate(label_replace(kubernetes_io:container_cpu_core_usage_time{container_name!="",cluster_name="{{.Values.metrics.queries.gke.cluster_name}}"{{.Values.prometheus.labels}}}, "pod","$1","pod_name", "(.+)")[5m:])) by (pod)'
      pod_memory: 'sum(label_replace(kubernetes_io:container_memory_used_bytes{cluster_name="{{.Values.metrics.queries.gke.cluster_name}}"{{.Values.prometheus.labels}}}, "pod","$1","pod_name", "(.+)")) by (pod)'
      namespace_cpu: 'sum(rate(label_replace(kubernetes_io:container_cpu_core_usage_time{container_name!="",cluster_name="{{.Values.metrics.queries.gke.cluster_name}}"{{.Values.prometheus.labels}}}, "namespace","$1","namespace_name", "(.+)")[5m])) by (namespace)'
      namespace_memory: 'sum(label_replace(kubernetes_io:container_memory_used_bytes{cluster_name="{{.Values.metrics.queries.gke.cluster_name}}"{{.Values.prometheus.labels}}}, "namespace","$1","namespace_name", "(.+)")) by (namespace)'

# @schema
# required: false
# @schema
topology:
  # @schema
  # required: false
  # default: true
  # @schema
  enabled: true
  # @schema
  # required: false
  # @schema
  name: "{{ .Values.clusterName }}"

  # @schema
  # required: false
  # @schema
  schedule: "@every 5m"
  # @schema
  # required: false
  # @schema
  icon: kubernetes
  # @schema
  # required: false
  # @schema
  groupBy:
    # @schema
    # required: false
    # @schema
    tag: ""
    # @schema
    # required: false
    # $ref: https://raw.githubusercontent.com/flanksource/duty/main/schema/openapi/scrape_config.schema.json#/$defs/ResourceSelector
    # @schema
    selector: {}

  # @schema
  # required: false
  # @schema
  ingress:
    # @schema
    # required: false
    # default: true
    # @schema
    enabled: true

# @schema
# required: false
# @schema
scraper:
  # @schema
  # required: false
  # @schema
  name: "kubernetes-{{ .Values.clusterName }}"
  # @schema
  # required: false
  # @schema
  schedule: "@every 15m"
  # required: false
  # @schema
  # required: false
  # type: array
  # items:
  #   $ref: https://github.com/flanksource/duty/raw/main/schema/openapi/config_kubernetes.schema.json#/$defs/KubernetesResourceToWatch
  # @schema
  watch: []
  # @schema
  # type: array
  # required: false
  # items:
  #   $ref: https://github.com/flanksource/duty/raw/main/schema/openapi/config_kubernetes.schema.json#/$defs/KubernetesResourceToWatch
  # @schema
  defaultWatch:
    - apiVersion: v1
      kind: Namespace
    - apiVersion: v1
      kind: Node
    - apiVersion: v1
      kind: Pod
    - apiVersion: apps/v1
      kind: Deployment
    - apiVersion: apps/v1
      kind: ReplicaSet
    - apiVersion: apps/v1
      kind: StatefulSet
    - apiVersion: apps/v1
      kind: DaemonSet
    - apiVersion: batch/v1
      kind: CronJob
    - apiVersion: batch/v1
      kind: Job
  # @schema
  # $ref: https://github.com/flanksource/duty/raw/main/schema/openapi/config_kubernetes.schema.json#/$defs/KubernetesExclusionConfig
  # @schema
  exclusions:
    # @schema
    # required: false
    # type: array
    # items:
    #   type: string
    # @schema
    name: []
    # @schema
    # required: false
    # type: array
    # items:
    #   type: string
    # @schema
    namespace: []
    # @schema
    # required: false
    # type: array
    # items:
    #   type: string
    # @schema
    kind: []
    # @schema
    # required: false
    # type: object
    # allowProperties: true
    # @schema
    labels: {}


  # @schema
  # $ref: https://github.com/flanksource/duty/raw/main/schema/openapi/config_kubernetes.schema.json#/$defs/KubernetesExclusionConfig
  # @schema
  defaultExclusions:
    name: []
    namespace: []
    labels:
      canaries.flanksource.com/generated: "true"
      canaries.flanksource.com/check-id: "*"
      canaries.flanksource.com/check: "*"
      canary-checker.flanksource.com/generated: "*"
      canary-checker.flanksource.com/check: "*"
    kind:
      - Secret
      - APIService
      - PodMetrics
      - NodeMetrics
      - endpoints.discovery.k8s.io
      - endpointslices.discovery.k8s.io
      - leases.coordination.k8s.io
      - podmetrics.metrics.k8s.io
      - nodemetrics.metrics.k8s.io
      - customresourcedefinition
      - componentstatuses
      - controllerrevisions
      - certificaterequests
      - orders.acme.cert-manager.io

  # @schema
  # required: false
  # type: array
  # items:
  #   $ref: https://github.com/flanksource/duty/raw/main/schema/openapi/config_kubernetes.schema.json#/$defs/KubernetesRelationshipSelectorTemplate
  # @schema
  relationships: []

  # @schema
  # required: false
  # type: array
  # items:
  #   $ref: https://github.com/flanksource/duty/raw/main/schema/openapi/config_kubernetes.schema.json#/$defs/KubernetesRelationshipSelectorTemplate
  # @schema
  defaultRelationships:
    - kind:
        expr: "has(spec.claimRef) ? spec.claimRef.kind : ''"
      name:
        expr: "has(spec.claimRef) ? spec.claimRef.name : ''"
      namespace:
        expr: "has(spec.claimRef) ? spec.claimRef.namespace : ''"
    # FluxCD Git relationships
    - name:
        expr: "has(spec.sourceRef) ? spec.sourceRef.name : '' "
      namespace:
        expr: "has(spec.sourceRef) && has(spec.sourceRef.namespace)  ? spec.sourceRef.namespace : metadata.namespace"
      kind:
        value: "GitRepository"

  # @schema
  # required: false
  # $ref: https://github.com/flanksource/duty/raw/main/schema/openapi/config_kubernetes.schema.json#/$defs/KubernetesEventConfig
  # @schema
  event:
    exclusions:
      # @schema
      # type: array
      # items:
      #   type: string
      # required: false
      # @schema
      reason:
        - SuccessfulCreate
        - Created
        - DNSConfigForming
        - ArtifactUpToDate
        - GarbageCollectionSucceeded

    severityKeywords:
      # @schema
      # type: array
      # required: false
      # items:
      #   type: string
      # @schema
      error:
        - failed
        - error
      # @schema
      # type: array
      # required: false
      # items:
      #   type: string
      # @schema
      warn:
        - backoff
        - nodeoutofmemory
  # @schema
  # required: false
  # $ref: https://github.com/flanksource/duty/raw/main/schema/openapi/config_kubernetes.schema.json#/$defs/Transform
  # @schema
  transform:
    exclude: []
    mask: []
    changes:
      exclude: []
      mapping: []
    expr: ""
    relationship: []
  # @schema
  # required: false
  # $ref: https://github.com/flanksource/duty/raw/main/schema/openapi/config_kubernetes.schema.json#/$defs/Transform
  # @schema
  defaultTransform:
    exclude: []
    mask:
      - selector: config_class == 'Connection'
        jsonpath: "$..['password','bearer','clientSecret','personalAccessToken','certificate','secretKey','token'].value"
        value: '******'
    changes:
      exclude:
        - 'details.source.component == "canary-checker" && (change_type == "Failed" || change_type == "Pass")'
        - 'change_type == "diff" && config_type == "MissionControl::Canary" && summary.startsWith("status.")'
        - 'config_type == "Kubernetes::Node" && summary == "status.images"'
        - 'has(details.source) && details.source.component == "kustomize-controller" && details.reason == "ReconciliationSucceeded"'
        - 'config_type.startsWith("Kubernetes::") && summary == "metadata.annotations.endpoints.kubernetes.io/last-change-trigger-time"'
        - >
          change_type == "diff" && summary == "status.reconciledAt" &&
          config != null &&
          has(config.apiVersion) && config.apiVersion == "argoproj.io/v1alpha1" &&
          has(config.kind) && config.kind == "Application"
      mapping:
        - filter: change.change_type == 'diff' && jq('.status.containerStatuses[0].lastState.terminated.reason', patch) == 'OOMKilled'
          severity: high
          type: OOMKilled
        - filter: >
            change.change_type == 'diff' &&
            jq('.status.containerStatuses[0].restartCount', patch) != null &&
            jq('.status.containerStatuses[0].restartCount', patch) > 0
          type: PodCrashLooping
          severity: high
        - filter: >
            change.change_type == 'diff' &&
            jq('.status.conditions[]? | select(.type == "Healthy").message', patch).contains('Health check passed')
          type: HealthCheckPassed
        - filter: >
            change.change_type == 'diff' &&
            jq('.status.conditions[]? | select(.type == "Healthy").message', patch).contains('Health check failed')
          type: HealthCheckFailed
    relationship:
      # Link Crossplane objects to the cloud resources
      - filter: config_type.startsWith("Crossplane::") && has(config.status) && has(config.status.atProvider) && has(config.status.atProvider.id)
        external_id:
          expr: config.status.atProvider.id.lowerAscii()
      # Link a service to a deployment (adjust the label selector accordingly)
      - filter: config_type == "Kubernetes::Service"
        type:
          value: "Kubernetes::Deployment"
        name:
          expr: |
            has(config.spec.selector) && has(config.spec.selector.name) ? config.spec.selector.name : ''
      # Link Pods to PVCs
      - filter: config_type == 'Kubernetes::Pod' && has(config.spec) && has(config.spec.volumes)
        expr: |
          config.spec.volumes.
            filter(item, has(item.persistentVolumeClaim)).
            map(item, {"type": "Kubernetes::PersistentVolumeClaim", "name": item.persistentVolumeClaim.claimName}).
            toJSON()

  # @schema
  # required: false
  # additionalProperties: true
  # @schema
  retention:
    staleItemAge: "4h"
    # @schema
    # type: array
    # items:
    #   $ref: https://raw.githubusercontent.com/flanksource/duty/main/schema/openapi/scrape_config.schema.json#/$defs/ChangeRetentionSpec
    # required: false
    # @schema
    defaultChanges:
      - name: ReconciliationSucceeded
        age: 1d
      - name: ArtifactUpToDate
        age: 1d
      - name: GarbageCollectionSucceeded
        age: 1d
      - name: Pulling
        age: 1d
      - name: Pulled
        age: 1d
      - name: Killing
        age: 7d
      - name: Scheduled
        age: 7d
      - name: Started
        age: 7d
      - name: HealthCheckPassed
        age: 4h
    # @schema
    # type: array
    # items:
    #   $ref: https://raw.githubusercontent.com/flanksource/duty/main/schema/openapi/scrape_config.schema.json#/$defs/ChangeRetentionSpec
    # required: false
    # @schema
    changes: []

# @schema
# required: false
# @schema
playbooks:
  # If this is set to false, no playbooks will be created
  # If true, all individual playbook values will be honored
  enabled: true
  kubectlLogs: true
  deletePod: true
  cleanupFailedPods: true
  podSnapshot: false
  requestNamespaceAccess: true
  restartDeployment: true
  scaleDeployment: true
  createDeployment: true
  updateResourceImage: true
  updateResourceRequestsLimits: true
  deleteResource: true
  edit_kubernetes_manifests:
    enabled: false
    git_connection: "connection://"
