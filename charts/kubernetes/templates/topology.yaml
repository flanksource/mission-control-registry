---
{{- if and .Values.prometheus.createConnection .Values.prometheus.url }}
apiVersion: mission-control.flanksource.com/v1
kind: Connection
metadata:
  name: {{ .Values.prometheus.connection }}
spec:
  prometheus:
    url: {{ .Values.prometheus.url }}
    {{- if .Values.prometheus.auth }}
    auth:
      {{ .Values.prometheus.auth | toYaml | nindent 6}}
    {{- end }}
{{- end }}
---
apiVersion: canaries.flanksource.com/v1
kind: Topology
metadata:
  name: {{ .Values.topology.name }}
  labels:
    cluster: {{.Values.clusterName}}
    {{- include "kubernetes.labels" . | nindent 4 }}
spec:
  groupBy:
    tag: cluster
    selector:
      - types:
          - Kubernetes::Cluster
  type: Kubernetes::Cluster
  icon: "{{ .Values.topology.icon }}"
  schedule: "{{ .Values.topology.schedule }}"
  properties:
    {{- include "kubernetes.topology.metricProperties.cluster" . | nindent 4 }}
  components:
    - name: nodes
      icon: server
      id:
        javascript: properties.zone + "/" + self.name
      type: Kubernetes::Node
      components:
      - name: NodesGroup
        type: virtual
        icon: server
        lookup:
          kubernetes:
            - kind: Node
              name: k8s
              {{- if not (empty .Values.kubeconfig)}}
              kubeconfig: {{ .Values.kubeconfig | toYaml | nindent 16}}
              {{- end}}
              display:
                expr: |
                  dyn(results).map(r, r.Object).map(r, {
                    'name': r.metadata.name,
                    'type': 'Kubernetes::Node',
                    'labels': k8s.labels(r).merge({ 'cluster': '{{.Values.clusterName}}' }),
                    'external_id': r.metadata.name,
                    'logs': [{'name': 'Kubernetes', 'type': 'KubernetesNode'}],
                    'configs': [{'name': r.metadata.name, 'type': 'Kubernetes::Node'}],
                    'selectors':[{'fieldSelector': 'node='+r.metadata.name}],
                    'status': k8s.getHealth(r).health,
                    'status_reason': k8s.getHealth(r).status + ' ' + k8s.getHealth(r).message,
                    'properties': [
                      {"name": "cpu", "max": k8s.cpuAsMillicores(r.status.allocatable["cpu"]), "unit": "millicores", "headline": true},
                      {"name": "memory", "max": k8s.memoryAsBytes(r.status.allocatable["memory"]), "unit": "bytes", "headline": true},
                      {"name": "ephemeral-storage", "max": has(r.status.allocatable) && ("ephemeral-storage" in r.status.allocatable) ? k8s.memoryAsBytes(r.status.allocatable["ephemeral-storage"]) : 0, "unit": "bytes", "headline": true},
                      {"name": "zone", "text": "topology.kubernetes.io/zone" in r.metadata.labels ? r.metadata.labels["topology.kubernetes.io/zone"]: ""},
                    ]
                  }).toJSON()

        properties:
          {{- include "kubernetes.topology.metricProperties.node" . | nindent 8 }}

    - name: PodGroup
      icon: pods
      type: virtual
      lookup:
        kubernetes:
          - kind: Pod
            {{- if not (empty .Values.kubeconfig)}}
            kubeconfig: {{ .Values.kubeconfig | toYaml | nindent 14}}
            {{- end}}
            ready: false
            ignore:
              - junit-fail**
              - junit-pass**
            display:
              expr: |
                dyn(results).map(r, r.Object).map(r, {
                  'name': r.metadata.name,
                  'namespace': r.metadata.namespace,
                  'type': 'Kubernetes::Pod',
                  'external_id': r.metadata.namespace + '/' + r.metadata.name,
                  'parentLookup': {'name': r.metadata.namespace, 'type': 'Kubernetes::Namespace'},
                  'labels': k8s.labels(r).merge({ 'cluster': '{{.Values.clusterName}}' }),
                  'configs': [{'name': r.metadata.name, 'type': 'Kubernetes::Pod'}],
                  'logs': [{'name': 'Kubernetes', 'type': 'KubernetesPod'}],
                  'status': k8s.getHealth(r).health,
                  'status_reason': k8s.getHealth(r).status + ' ' + k8s.getHealth(r).message,
                  'properties': [
                    {"name": "image", "text": r.spec.containers[0].image},
                    {"name": "cpu", "max": k8s.getResourcesLimit(r, "cpu"), "unit": "millicores", "headline": true},
                    {"name": "memory", "max": k8s.getResourcesLimit(r, "memory"), "unit": "bytes", "headline": true},
                    {"name": "node", "text": r.spec.?nodeName.orValue('')},
                    {"name": "created_at", "text": time.Parse('2006-01-02T15:04:05Z07:00', r.metadata.creationTimestamp)},
                    {"name": "namespace", "text": r.metadata.namespace},
                  ]
                }).toJSON()

      properties:
        {{- include "kubernetes.topology.metricProperties.pod" . | nindent 6 }}

    - name: Namespaces
      icon: namespace
      type: Kubernetes::Namespaces
      components:
      - name: NamespaceGroup
        type: virtual
        lookup:
          kubernetes:
            - kind: Namespace
              {{- if not (empty .Values.kubeconfig)}}
              kubeconfig: {{ .Values.kubeconfig | toYaml | nindent 16}}
              {{- end}}
              display:
                expr: |
                  dyn(results).map(r, r.Object).map(r, {
                    'name': r.metadata.name,
                    'type': 'Kubernetes::Namespace',
                    'external_id': r.metadata.name,
                    'labels': k8s.labels(r).merge({ 'cluster': '{{.Values.clusterName}}' }),
                    'configs': [{'name': r.metadata.name, 'type': 'Kubernetes::Namespace'}],
                    'properties': [
                      {'name': 'cpu', 'unit': 'millicores', 'headline': true},
                      {'name': 'memory', 'unit': 'bytes', 'headline': true},
                    ],
                  }).toJSON()
        properties:
          {{- include "kubernetes.topology.metricProperties.namespace" . | nindent 8 }}
