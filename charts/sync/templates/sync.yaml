apiVersion: canaries.flanksource.com/v1
kind: Topology
metadata:
  name: {{ .Values.topologyName }}
spec:
  icon: sync
  type: Topology
  schedule: "@every 2m"
  components:
    - name: Check Statuses
      icon: helm
      properties:
        - name: Backlog
          lookup:
            postgres:
              - query: SELECT count(*) FROM check_statuses where is_pushed = false
                connection: connection://postgres/mission-control/mission-control 
                display:
                  expr: results.rows[0].count 
        - name: Last push time
          lookup:
            postgres:
              - query: SELECT max(time) FROM check_statuses where is_pushed = true
                connection: connection://postgres/mission-control/mission-control 
                display:
                  expr: results.rows[0].max
      checks:
        - inline:
            postgres:
              - query: SELECT count(*) FROM check_statuses where is_pushed = false
                connection: connection://postgres/mission-control/mission-control 
                name: Check status backlog
                display:
                  expr: results.rows[0].count

    - name: Event Queue
      icon: switch
      properties:
        - name: Backlog
          lookup:
            postgres:
              - query: SELECT count(*) FROM event_queue
                connection: connection://postgres/mission-control/mission-control 
                display:
                  expr: results.rows[0].count 
      checks:
        - inline:
            postgres:
              - query: SELECT distinct(name), count(*) FROM event_queue GROUP BY name
                connection: connection://postgres/mission-control/mission-control 
                name: Event Queue Checks
                transformDeleteStrategy: MarkHealthy
                transform:
                  expr: |
                    results.rows.map(r, {
                      'name': r.name,
                      'icon': 'switch',
                      'pass': int(r.count) < 200,
                    }).toJSON()

    - name: Canary
      icon: canary-checker
      checks:
        - inline:
            postgres:
              - query: |
                  WITH cte AS (
                    SELECT name, resource_id, resource_type, created_at, details, status, ROW_NUMBER() OVER (PARTITION by resource_id, name ORDER BY created_at DESC) AS rn
                    FROM job_history
                    WHERE
                      resource_id in (select id::text from canaries where deleted_at is null) AND
                      status != 'RUNNING' AND
                      resource_type = 'canary'
                  )
                  SELECT * FROM cte WHERE rn = 1;
                connection: connection://postgres/mission-control/mission-control 
                name: CanarySync Check
                transform:
                  expr: |
                    results.rows.map(r, {
                      'name': r.name + ':' +r.resource_id,
                      'icon': 'canary-checker',
                      'message': r.created_at + ' | ' r.details,
                      'description': r.details,
                      'pass': r.status=='SUCCESS',
                    }).toJSON()

    - name: Topology
      icon: traces
      checks:
        - inline:
            postgres:
              - query: |
                  WITH cte AS (
                    SELECT name, resource_id, resource_type, created_at, details, status, ROW_NUMBER() OVER (PARTITION by resource_id, name ORDER BY created_at DESC) AS rn
                    FROM job_history
                    WHERE
                      resource_id in (select id::text from topologies where deleted_at is null) AND
                      status != 'RUNNING' AND
                      resource_type = 'topology'
                  )
                  SELECT * FROM cte WHERE rn = 1;
                connection: connection://postgres/mission-control/mission-control 
                name: TopologyChecks
                transform:
                  expr: |
                    results.rows.map(r, {
                      'name': r.name + ':' +r.resource_id,
                      'icon': 'traces',
                      'message': r.created_at + ' | ' r.details,
                      'description': r.details,
                      'pass': r.status=='SUCCESS',
                    }).toJSON()

    - name: Config Scraper
      icon: config
      checks:
        - inline:
            postgres:
              - query: |
                  WITH cte AS (
                    SELECT name, resource_id, resource_type, created_at, details, status, ROW_NUMBER() OVER (PARTITION by resource_id, name ORDER BY created_at DESC) AS rn
                    FROM job_history
                    WHERE
                      resource_id in (select id::text from config_scrapers where deleted_at is null) AND
                      status != 'RUNNING' AND
                      resource_type = 'config_scraper'
                  )
                  SELECT * FROM cte WHERE rn = 1
                connection: connection://postgres/mission-control/mission-control 
                name: Config Scraper Checks
                transform:
                  expr: |
                    results.rows.map(r, {
                      'name': r.name + ':' +r.resource_id,
                      'icon': 'config',
                      'message': r.created_at + ' | ' r.details,
                      'description': r.details,
                      'pass': r.status=='SUCCESS',
                    }).toJSON()
