{{- if .Values.playbooks.kubernetes }}
---
apiVersion: mission-control.flanksource.com/v1
kind: Playbook
metadata:
  name: pod-snapshot
  namespace: default
spec:
  title: Pod Snapshot
  category: Kubernetes
  description: Takes a snapshot of the pod (Logs, yaml, & events)
  components:
    - type: Kubernetes::Pod
  actions:
    - name: Take snapshot
      exec:
        script: |
          path="/tmp/pod-snapshot/{{.component.name}}"
          rm -rf $path
          mkdir -p $path
          kubectl logs {{.component.name}} -n {{.component.namespace}} > "$path/logs.txt"
          kubectl get pods -n {{.component.namespace}} {{.component.name}} -o yaml > "$path/manifest.yaml"
          kubectl get events --field-selector=involvedObject.kind=Pod,involvedObject.name={{.component.name}} \
            -n {{.component.namespace}} > "$path/events.txt"
        artifacts:
          - path: "/tmp/pod-snapshot/{{.component.name}}/*"
---
apiVersion: mission-control.flanksource.com/v1
kind: Playbook
metadata:
  name: scale-deployment
  namespace: default
spec:
  title: Scale Deployment
  category: Kubernetes
  configs:
    - types:
        - Kubernetes::Deployment
  parameters:
    - name: replicas
      label: Replicas
      type: text
    - name: config
      label: Config
      type: config
      properties:
        filter: Kubernetes::Node
  actions:
    - name: get replicas
      exec:
        script: kubectl get deployments -n {{.config.namespace}} {{.config.name}} -o yaml | yq '.status.replicas'
    - name: Scale deployment
      if: "int(getLastAction().result.stdout) != parameters.replicas"
      exec:
        script: kubectl scale deployment -n {{.config.namespace}} {{.config.name}} --replicas={{.parameters.replicas}}
---
apiVersion: mission-control.flanksource.com/v1
kind: Playbook
metadata:
  name: restart-deployment
  namespace: default
spec:
  title: Restart Deployment
  category: Kubernetes
  configs:
    - types:
        - Kubernetes::Deployment
  actions:
    - name: Scale deployment
      exec:
        script: kubectl rollout release deployment -n {{.config.namespace}} {{.config.name}}
---
apiVersion: mission-control.flanksource.com/v1
kind: Playbook
metadata:
  name: delete-pod
  namespace: default
spec:
  title: Delete Pod
  category: Kubernetes
  description: Deletes a kubernetes pod
  configs:
    - types:
        - Kubernetes::Pod
  actions:
    - name: Delete the pod
      runsOn:
        - arsene
      exec:
        script: |
          echo "{{.config.namespace}} {{.config.name}}";
          kubectl delete pod -n {{.config.namespace}} {{.config.name}}
---
apiVersion: mission-control.flanksource.com/v1
kind: Playbook
metadata:
  name: cleanup-failed-pod
  namespace: default
spec:
  title: Cleanup Failed Pods
  category: Kubernetes
  description: Deletes all failed kubernetes pod
  configs:
    - types:
        - Kubernetes::Cluster
  actions:
    - name: Delete pods
      exec:
        script: >
          kubectl get pods -A --no-headers |
          grep -E 'Completed|Error|CrashLoopBackOff|ErrImagePull|ImagePullBackOff|ContainerStatusUnknown|CreateContainerConfigError|Evicted' |
          while read -r namespace pod _; do
              kubectl delete pod "$pod" --namespace="$namespace"
          done
---
apiVersion: mission-control.flanksource.com/v1
kind: Playbook
metadata:
  name: request-namespace-access
  namespace: default
spec:
  title: Request Namespace Access
  category: Kubernetes
  description: Adds a Rolebinding
  parameters:
    - name: user
      label: User
    - name: role
      label: Role
      default: "{{random.Alpha 8}}"
  configs:
    - types:
        - Kubernetes::Namespace
  actions:
    - name: Create role
      exec:
        script: >-
          kubectl create role {{.params.role}}
          --verb="get,list,create,update,delete"
          --resource=pods,services
          --namespace={{.config.name}}
    - name: Create RoleBinding
      exec:
        script: >-
          kubectl create rolebinding {{.params.role}}-rolebinding
          --namespace={{.config.name}}
          --user={{.params.user}}
          --role={{.params.role}}
    - name: Clear role and role binding
      if: "success()"
      delay: "'5s'"
      exec:
        script: |
          kubectl delete rolebinding {{.params.role}}-rolebinding --namespace={{.config.name}}
          kubectl delete role {{.params.role}} --namespace={{.config.name}}
{{- end}}
