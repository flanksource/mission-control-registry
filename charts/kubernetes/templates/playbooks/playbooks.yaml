{{- if and .Values.playbooks.enabled .Values.playbooks.podSnapshot }}
---
apiVersion: mission-control.flanksource.com/v1
kind: Playbook
metadata:
  name: pod-snapshot
spec:
  title: Pod Snapshot
  category: Kubernetes
  description: Takes a snapshot of a pod (logs, manifest and events)
  icon: add-snapshot
  configs:
    - types:
        - Kubernetes::Pod
  actions:
    - name: Take snapshot
      exec:
        script: |
          path="/tmp/pod-snapshot/$(.config.id)"
          rm -rf $path
          mkdir -p $path
          kubectl logs $(.config.name) -n $(.config.tags.namespace) > "$path/logs.txt"
          kubectl get pods $(.config.name) -n $(.config.tags.namespace) -o yaml > "$path/manifest.yaml"
          kubectl get events --field-selector=involvedObject.kind=Pod,involvedObject.name=$(.config.name) \
            -n $(.config.tags.namespace) > "$path/events.txt"
        artifacts:
          - path: '/tmp/pod-snapshot/$(.config.id)/*'
{{- end}}

{{- if and .Values.playbooks.enabled .Values.playbooks.scaleDeployment }}
---
apiVersion: mission-control.flanksource.com/v1
kind: Playbook
metadata:
  name: scale-deployment
spec:
  title: Scale Deployment
  icon: scale-out
  category: Kubernetes
  configs:
    - types:
        - Kubernetes::Deployment
  parameters:
    - name: replicas
      label: Replicas
      type: text
      default: "$(.config.config.spec.replicas)"
  actions:
    - name: Scale deployment
      exec:
        script: |
          kubectl scale deployment -n $(.config.tags.namespace) $(.config.name) --replicas=$(.params.replicas)
{{- end}}

{{- if and .Values.playbooks.enabled .Values.playbooks.restartDeployment }}
---
apiVersion: mission-control.flanksource.com/v1
kind: Playbook
metadata:
  name: restart-deployment
spec:
  title: Restart Deployment
  icon: reload
  category: Kubernetes
  configs:
    - types:
        - Kubernetes::Deployment
  actions:
    - name: Scale deployment
      exec:
        script: kubectl rollout release deployment -n $(.config.tags.namespace) $(.config.name)
{{- end}}

{{- if and .Values.playbooks.enabled .Values.playbooks.cleanupFailedPods }}
---
apiVersion: mission-control.flanksource.com/v1
kind: Playbook
metadata:
  name: cleanup-failed-pod
spec:
  title: Cleanup Failed Pods
  icon: remove-trash
  category: Kubernetes
  description: Deletes all failed kubernetes pod
  configs:
    - types:
        - Kubernetes::Cluster
  actions:
    - name: Delete pods
      exec:
        script: >
          kubectl get pods -A --no-headers |
          grep -E 'Completed|Error|CrashLoopBackOff|ErrImagePull|ImagePullBackOff|ContainerStatusUnknown|CreateContainerConfigError|Evicted' |
          while read -r namespace pod _; do
              kubectl delete pod "$pod" --namespace="$namespace"
          done
{{- end}}

{{- if and .Values.playbooks.enabled .Values.playbooks.deletePod }}
---
apiVersion: mission-control.flanksource.com/v1
kind: Playbook
metadata:
  name: delete-pod
spec:
  title: Delete Pod
  icon: delete
  category: Kubernetes
  description: Deletes the selected pod
  configs:
    - types:
        - Kubernetes::Pod
  actions:
    - name: Delete pod
      exec:
        script: |
          kubectl delete pod -n $(.config.tags.namespace) $(.config.name)
{{- end}}

{{- if and .Values.playbooks.enabled .Values.playbooks.requestNamespaceAccess }}
---
apiVersion: mission-control.flanksource.com/v1
kind: Playbook
metadata:
  name: request-namespace-access
spec:
  title: Request Namespace Access
  icon: add-shield
  category: Kubernetes
  description: Adds a Rolebinding to the given role
  parameters:
    - name: user
      label: User
    - name: delay
      label: Expires after
      type: list
      properties:
        options:
          - label: "30 minutes"
            value: '30m'
          - label: "1 hour"
            value: '1h'
          - label: "6 hour"
            value: "6h"
          - label: "12 hours"
            value: "12h"
          - label: "1 day"
            value: "1d"
          - label: "1 week"
            value: "1w"
    - name: role
      label: Role
      type: config
      properties:
        filter:
          - types:
              - Kubernetes::ClusterRole
  configs:
    - types:
        - Kubernetes::Namespace
  actions:
    - name: Create RoleBinding
      exec:
        script: >-
          kubectl create rolebinding "playbook-$(.run.id)"
          --namespace=$(.config.name)
          --user=$(.params.user)
          --role=$(.params.role.name)
    - name: Clear Rolebinding
      if: "success()"
      delay: ".params.delay"
      exec:
        script: |
          kubectl delete rolebinding "playbook-$(.run.id)" --namespace=$(.config.name)
{{- end}}

{{- if and .Values.playbooks .Values.playbooks.requestNamespaceAccessGitops }}
---
apiVersion: mission-control.flanksource.com/v1
kind: Playbook
metadata:
  name: request-namespace-access-gitops
spec:
  configs:
    - types:
        - Kubernetes::Namespace
  title: Request Namespace Access (GitOps)
  category: Kubernetes
  description: Adds a Rolebinding to the given role in the selected Namespace
  parameters:
    - name: repo
      label: Repository URL
    - name: base_branch
      label: Base branch
    - name: author_name
      label: Commit author
    - name: author_email
      label: Commit author Email
    - name: connection
      label: Repository Auth connection
    - name: path
      label: Path of the file
    - name: user
      label: Role Subject User
    - name: delay
      label: Expires after
      default: "'30m'"
      type: list
      properties:
        options:
          - label: '30 minutes'
            value: '30m'
          - label: '1 hour'
            value: '1h'
          - label: '5 hour'
            value: '5h'
          - label: '12 hours'
            value: '12h'
          - label: '1 day'
            value: '1d'
    - name: role
      label: Role
      type: config
      properties:
        filter:
          - types:
              - Kubernetes::ClusterRole
  actions:
    - name: Create RoleBinding
      gitops:
        repo:
          url: '$(.params.repo)'
          connection: '$(.params.connection)'
          base: '$(.params.base_branch)'
          branch: 'request-namespace-access-$(.config.name)-$(.params.role.name)-$(.run.id)'
          type: 'github'
        commit:
          email: '$(.params.author_email)'
          author: '$(.params.author_name)'
          message: 'chore(rbac): grant $(.params.user) $(.params.role.name) on $(.config.name)'
        pr:
          title:  'Grant $(.params.user) $(.params.role.name) on $(.config.name)'
        files:
          - path: '$(.params.path)'
            content: |
              apiVersion: rbac.authorization.k8s.io/v1
              kind: RoleBinding
              metadata:
                name: "$(.params.role.name)-$(.run.id)
                namespace: default
              roleRef:
                apiGroup: rbac.authorization.k8s.io
                kind: Role
                name: $(.params.role.name)
              subjects:
                - apiGroup: rbac.authorization.k8s.io
                  kind: User
                  name: $(.params.user)
    - name: Clear Rolebinding
      if: 'success()'
      delay: '.params.delay'
      gitops:
        repo:
          url: '$(.params.repo)'
          connection: '$(.params.connection)'
          base: '$(.params.base_branch)'
          branch: 'request-namespace-access-$(.config.name)-$(.params.role.name)-$(.run.id)'
        commit:
          email: '$(.params.author_email)'
          author: '$(.params.author_name)'
          message: 'remove rolebinding on namespace $(.config.name) to role $(.params.role.name) for user $(.params.user)'
        pr:
          title: 'remove rolebinding on namespace $(.config.name) to role $(.params.role.name) for user $(.params.user)'
        files:
          - path: '$(.params.path)'
            content: '$delete'
{{- end}}