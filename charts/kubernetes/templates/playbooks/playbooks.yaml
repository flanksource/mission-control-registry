{{- if .Values.playbooks.podSnapshot }}
---
apiVersion: mission-control.flanksource.com/v1
kind: Playbook
metadata:
  name: pod-snapshot
spec:
  title: Pod Snapshot
  category: Kubernetes
  description: Takes a snapshot of the pod (Logs, yaml, & events)
  components:
    - type: Kubernetes::Pod
  actions:
    - name: Take snapshot
      exec:
        script: |
          path="/tmp/pod-snapshot/$(.component.id)"
          rm -rf $path
          mkdir -p $path
          kubectl logs $(.component.name) -n $(.component.namespace) > "$path/logs.txt"
          kubectl get pods -n $(.component.namespace) $(.component.name) -o yaml > "$path/manifest.yaml"
          kubectl get events --field-selector=involvedObject.kind=Pod,involvedObject.name=$(.component.name) \
            -n $(.component.namespace) > "$path/events.txt"
        artifacts:
          - path: '/tmp/pod-snapshot/$(.component.id)/*'
{{- end}}
{{- if .Values.playbooks.scaleDeployment }}
---
apiVersion: mission-control.flanksource.com/v1
kind: Playbook
metadata:
  name: scale-deployment
spec:
  title: Scale Deployment
  category: Kubernetes
  configs:
    - types:
        - Kubernetes::Deployment
  parameters:
    - name: replicas
      label: Replicas
      type: text
      default: "$(.config.config.spec.replicas)"
  actions:
    - name: Scale deployment
      exec:
        script: |
          kubectl scale deployment -n $(.config.namespace) $(.config.name) --replicas=$(.params.replicas)
{{- end}}
{{- if .Values.playbooks.restartDeployment }}
---
apiVersion: mission-control.flanksource.com/v1
kind: Playbook
metadata:
  name: restart-deployment
spec:
  title: Restart Deployment
  category: Kubernetes
  configs:
    - types:
        - Kubernetes::Deployment
  actions:
    - name: Scale deployment
      exec:
        script: kubectl rollout release deployment -n $(.config.namespace) $(.config.name)
{{- end}}
{{- if .Values.playbooks.cleanupFailedPods }}
---
apiVersion: mission-control.flanksource.com/v1
kind: Playbook
metadata:
  name: cleanup-failed-pod
spec:
  title: Cleanup Failed Pods
  category: Kubernetes
  description: Deletes all failed kubernetes pod
  configs:
    - types:
        - Kubernetes::Cluster
  actions:
    - name: Delete pods
      exec:
        script: >
          kubectl get pods -A --no-headers |
          grep -E 'Completed|Error|CrashLoopBackOff|ErrImagePull|ImagePullBackOff|ContainerStatusUnknown|CreateContainerConfigError|Evicted' |
          while read -r namespace pod _; do
              kubectl delete pod "$pod" --namespace="$namespace"
          done
{{- end}}
{{- if .Values.playbooks.requestNamespaceAccess }}
---
apiVersion: mission-control.flanksource.com/v1
kind: Playbook
metadata:
  name: request-namespace-access
spec:
  title: Request Namespace Access
  category: Kubernetes
  description: Adds a Rolebinding to the given role
  parameters:
    - name: user
      label: User
    - name: role
      label: Role
      type: config
      properties:
        filter:
          type: Kubernetes::Role
  configs:
    - types:
        - Kubernetes::Namespace
  actions:
    - name: Create RoleBinding
      exec:
        script: >-
          kubectl create rolebinding $(.params.role)-rolebinding
          --namespace=$(.config.name)
          --user=$(.params.user)
          --role=$(.params.role)
    - name: Clear Rolebinding
      if: "success()"
      delay: "'20m'"
      exec:
        script: |
          kubectl delete rolebinding $(.params.role)-rolebinding --namespace=$(.config.name)
{{- end}}
