{{- if .Values.playbooks}}
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/flanksource/duty/main/schema/openapi/playbook.schema.json
apiVersion: mission-control.flanksource.com/v1
kind: Playbook
metadata:
  name: clear-event-queue
spec:
  parameters:
    - name: max_age
      label: Max Age (days)
      default: '30'
    - name: last_max_attempt
      label: Reset attempts where last tried is before (days)
      default: '7'
  title: Clear Event Queue
  category: Mission Control
  description: Deletes old events and fully retried events
  actions:
    - name: Delete stale events
      sql:
        connection: "connection://{{ .Values.connectionName }}"
        driver: postgres
        query: >-
          DELETE FROM event_queue
          WHERE created_at < NOW() - INTERVAL '$(.params.max_age) day'
    - name: Reset attempts
      sql:
        connection: "connection://{{ .Values.connectionName }}"
        driver: postgres
        query: >-
          UPDATE event_queue SET attempts = 0
          WHERE attempts > 0 AND
          last_attempt < NOW() - INTERVAL '$(.params.last_max_attempt) day'
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/flanksource/duty/main/schema/openapi/playbook.schema.json
apiVersion: mission-control.flanksource.com/v1
kind: Playbook
metadata:
  name: run-canary
spec:
  icon: Canary
  title: Run Canary
  description: Runs the canary on a canary-checker pod with configurable log level
  category: Mission Control
  configs:
    - types:
        - MissionControl::Canary
  parameters:
    - name: logLevel
      label: Log Level
      default: "-vvvvvvvvv"
      type: list
      properties:
        options:
          - label: info
            value: -v
          - label: debug
            value: -vv
          - label: trace
            value: -vvvvvvvvv
  actions:
    - name: Exec
      exec:
        connections:
          fromConfigItem: $(.config.id)
        script: |
          kubectl exec -i deploy/canary-checker -- sh -c '/app/canary-checker run - --namespace $(.config.tags.namespace) $(.params.logLevel)' <<"END"
          $(.config.config | toYAML)
          END
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/flanksource/duty/main/schema/openapi/playbook.schema.json
apiVersion: mission-control.flanksource.com/v1
kind: Playbook
metadata:
  name: vacuum-mission-control-tables
spec:
  icon: database
  title: Vacuum tables
  description: Vacuum mission control database tables to improve performance
  category: Mission Control
  actions:
    - name: Vacuum
      sql:
        connection: "connection://{{ .Values.connectionName }}"
        driver: postgres
        query : |
          SELECT DISTINCT(tablename) FROM (
              SELECT
                  schemaname,
                  tablename,
                  ROUND(CASE WHEN otta=0 THEN 0.0 ELSE sml.relpages/otta::numeric END,1) AS tbloat,
                  CASE WHEN relpages < otta THEN 0 ELSE bs*(sml.relpages-otta)::bigint END AS wastedbytes,
                  iname,
                  ROUND(CASE WHEN iotta=0 OR ipages=0 THEN 0.0 ELSE ipages/iotta::numeric END,1) AS ibloat,
                  CASE WHEN ipages < iotta THEN 0 ELSE bs*(ipages-iotta) END AS wastedibytes
              FROM (
                  SELECT
                      schemaname, tablename, cc.reltuples, cc.relpages, bs,
                      CEIL((cc.reltuples*((datahdr+ma-
                          (CASE WHEN datahdr%ma=0 THEN ma ELSE datahdr%ma END))+nullhdr2+4))/(bs-20::float)) AS otta,
                      COALESCE(c2.relname,'?') AS iname, COALESCE(c2.reltuples,0) AS ituples, COALESCE(c2.relpages,0) AS ipages,
                      COALESCE(CEIL((c2.reltuples*(datahdr-12))/(bs-20::float)),0) AS iotta
                  FROM (
                      SELECT
                          ma,bs,schemaname,tablename,
                          (datawidth+(hdr+ma-(case when hdr%ma=0 THEN ma ELSE hdr%ma END)))::numeric AS datahdr,
                          (maxfracsum*(nullhdr+ma-(case when nullhdr%ma=0 THEN ma ELSE nullhdr%ma END))) AS nullhdr2
                      FROM (
                          SELECT
                              schemaname, tablename, hdr, ma, bs,
                              SUM((1-null_frac)*avg_width) AS datawidth,
                              MAX(null_frac) AS maxfracsum,
                              hdr+(
                                  SELECT 1+count(*)/8
                                  FROM pg_stats s2
                                  WHERE null_frac<>0 AND s2.schemaname = s.schemaname AND s2.tablename = s.tablename
                              ) AS nullhdr
                          FROM pg_stats s, (
                              SELECT
                                  (SELECT current_setting('block_size')::numeric) AS bs,
                                  CASE WHEN substring(v,12,3) IN ('8.0','8.1','8.2') THEN 27 ELSE 23 END AS hdr,
                                  CASE WHEN v ~ 'mingw32' THEN 8 ELSE 4 END AS ma
                              FROM (SELECT version() AS v) AS foo
                          ) AS constants
                          WHERE schemaname = 'public'
                          GROUP BY 1,2,3,4,5
                      ) AS foo
                  ) AS rs
                  JOIN pg_class cc ON cc.relname = rs.tablename
                  JOIN pg_namespace nn ON cc.relnamespace = nn.oid AND nn.nspname = rs.schemaname AND nn.nspname <> 'information_schema'
                  LEFT JOIN pg_index i ON indrelid = cc.oid
                  LEFT JOIN pg_class c2 ON c2.oid = i.indexrelid
              ) AS sml
          ) WHERE tbloat > 1.5;

    - name: Vacuum
      sql:
        connection: "connection://{{ .Values.connectionName }}"
        driver: postgres
        query : VACUUM (FULL, ANALYZE) $(getLastAction().rows | jq `map(.tablename) | join(", ")` )

{{- end }}
